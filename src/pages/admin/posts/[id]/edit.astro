---
import Layout from '../../../../layouts/Layout.astro';
// No importamos ningún componente de editor
import { db } from '../../../../lib/db';
import { isAuthenticated } from '../../../../lib/auth';

export const prerender = false;

// Proteger esta ruta
if (!isAuthenticated(Astro.cookies)) {
  return Astro.redirect('/admin/login');
}

const { id } = Astro.params;

let post = null;
let error = null;

try {
  const { rows } = await db.query('SELECT * FROM blog_posts WHERE id = $1;', [id]);
  if (rows.length > 0) {
    post = rows[0];
  } else {
    error = 'Entrada de blog no encontrada.';
  }
} catch (e) {
  error = e.message;
}
---

<Layout title={post ? `Editar Post: ${post.title}` : 'Editar Post'}>
  <main class="admin-form-container">
    <h1>{post ? `Editar Post: ${post.title}` : 'Post no encontrado'}</h1>
    {error ? (
      <p>{error}</p>
    ) : post ? (
      <form id="edit-post-form">
        <input type="hidden" id="post-id" name="id" value={post.id} />
        <div>
          <label for="title">Título:</label>
          <input type="text" id="title" name="title" value={post.title} required>
        </div>
        <div>
          <label for="content">Contenido:</label>
          <!-- Contenedor donde se montará el editor -->
          <div id="editor"></div>
          <!-- Textarea oculto para el formulario -->
          <textarea id="content" name="content" style="display: none;">{post.content}</textarea>
        </div>
        <div>
          <label for="image_url">URL de la Imagen:</label>
          <input type="url" id="image_url" name="image_url" value={post.image_url || ''}>
        </div>
        <div>
          <label for="seo_description">Descripción SEO:</label>
          <textarea id="seo_description" name="seo_description" rows="3">{post.seo_description || ''}</textarea>
        </div>
        <button type="submit">Guardar Cambios</button>
      </form>
    ) : (
      <p>Cargando...</p>
    )}
    <p id="form-message" class="message"></p>
  </main>
</Layout>

<!-- Estilos del editor -->
<link rel="stylesheet" href="https://uicdn.toast.com/editor/latest/toastui-editor.min.css" />

<!-- Script del editor -->
<script is:inline src="https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js"></script>

<script define:vars={{ initialContent: post.content }} is:inline>
  // Script para inicializar el editor
  const textarea = document.getElementById('content');
  const editor = new toastui.Editor({
    el: document.querySelector('#editor'),
    height: '500px',
    initialEditType: 'markdown',
    previewStyle: 'vertical',
    initialValue: initialContent,
    theme: 'dark',
    events: {
      change: () => {
        textarea.value = editor.getMarkdown();
      }
    }
  });
</script>

<style is:global>
  /* Forzar color de texto en el editor principal (WYSIWYG) */
  .toastui-editor-ww-container .ProseMirror,
  .ProseMirror p, .ProseMirror h1, .ProseMirror h2, .ProseMirror h3, .ProseMirror h4, .ProseMirror li {
    color: #ffffff !important;
  }

  /* Forzar color de texto en la vista de código Markdown */
  .toastui-editor-md-container .CodeMirror,
  .CodeMirror-line {
    color: #ffffff !important;
  }

  /* Asegurar que el cursor sea blanco y visible */
  .CodeMirror-cursor {
    border-left: 1px solid #ffffff !important;
  }
</style>

<style>
  .admin-form-container {
    max-width: 800px;
    margin: 50px auto;
    padding: 2rem;
    background-color: #1a1a1a;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }
  .admin-form-container h1 {
    color: #00bcd4;
    text-align: center;
    margin-bottom: 1.5rem;
  }
  .admin-form-container div {
    margin-bottom: 1rem;
  }
  .admin-form-container label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }
  .admin-form-container input[type="text"],
  .admin-form-container input[type="url"],
  .admin-form-container textarea {
    width: 100%;
    padding: 0.8rem;
    border: 1px solid #333;
    border-radius: 4px;
    background-color: #0d0d0d;
    color: #fff;
  }
  .admin-form-container button {
    width: 100%;
    padding: 1rem;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1.1rem;
    transition: background-color 0.3s ease;
  }
  .admin-form-container button:hover {
    background-color: #0056b3;
  }
  .message {
    margin-top: 1rem;
    text-align: center;
  }
  .message.success {
    color: green;
  }
  .message.error {
    color: red;
  }
</style>

<script>
  document.getElementById('edit-post-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    const postId = formData.get('id');
    const messageElement = document.getElementById('form-message');
    messageElement.textContent = 'Guardando cambios...';
    messageElement.className = 'message';

    const response = await fetch(`/api/posts/${postId}/update`, {
      method: 'PUT',
      body: JSON.stringify(Object.fromEntries(formData)),
      headers: {
        'Content-Type': 'application/json',
      },
    });

    const result = await response.json();

    if (response.ok) {
      messageElement.textContent = result.message;
      messageElement.classList.add('success');
    } else {
      messageElement.textContent = `Error: ${result.message}`;
      messageElement.classList.add('error');
    }
  });
</script>
